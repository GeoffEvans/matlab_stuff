function [ a ] = aParameters( scanVar,systemVar,apparentDepth, zNormalised )

% In the original a equations, d4app has been replaced with original
% equation with z component, May be worth changing original ramprate
% function to take care of this and can have centralised function
% irrespective of modes.

a(:,1) = systemVar.diffractionMode * ((systemVar.acousticVelocity /...
    scanVar.opticalWaveLength) .*...
     (systemVar.acousticVelocity ./ (((apparentDepth.d4AppMin ./ zNormalised)+...
     apparentDepth.d3App)) - apparentDepth.dtheta3bydt) ./ ...
     (2 + (apparentDepth.d1App + apparentDepth.d2App) ./ ((apparentDepth.d4AppMin ./ zNormalised)+...
     apparentDepth.d3App) - ...
     (apparentDepth.d1App + apparentDepth.d2App) ./ systemVar.acousticVelocity .* ...
    apparentDepth.dtheta3bydt))

a(:,2) = systemVar.diffractionMode .* ((systemVar.acousticVelocity / scanVar.opticalWaveLength) .* ...
    (systemVar.acousticVelocity ./ ((apparentDepth.d4AppMin ./ zNormalised))-...
    apparentDepth.dphibydt) ./ (2 + (apparentDepth.d2App + apparentDepth.d3App)...
    ./ (apparentDepth.d4AppMin ./ zNormalised) - (apparentDepth.d2App + apparentDepth.d3App) ./ ...
    systemVar.acousticVelocity .* apparentDepth.dphibydt));

a(:,3) = systemVar.diffractionMode .* (systemVar.acousticVelocity^ 2./ ...
    (2 * scanVar.opticalWaveLength .* ...
    ((apparentDepth.d4AppMin ./ zNormalised) + apparentDepth.d3App)) + systemVar.acousticVelocity ./ ...
    (2 * scanVar.opticalWaveLength) .* apparentDepth.dtheta3bydt);

a(:,4) = systemVar.diffractionMode .* (systemVar.acousticVelocity^2 ./ ...
    (2 * scanVar.opticalWaveLength .* ...
    (apparentDepth.d4AppMin ./ zNormalised)) + systemVar.acousticVelocity ./ ...
    (2 * scanVar.opticalWaveLength) .* apparentDepth.dphibydt);
end